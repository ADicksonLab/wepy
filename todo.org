* Simulation manager architecture

** TODO [#B] allow for resampler to get information on the whole tree of data :feature:
* HDF5

** TODO [#A] sparse velocities etc. across trajectory                  :core:
** TODO [#A] restarting simulations, multiple runs                     :core:
** TODO [#A] implement SWMR                                         :feature:

** TODO [#B] full slice across datasets in TrajHDF5                 :feature:

get all values for a collection of indices, with fancy slicing

Call it a cycle cross section.

Should be a function for each field of a run to get the cycle data:
- cycle_resampling(run_idx, cycle_idxs)
- cycle_boundary_conditions(run_idx, cycle_idxs)
- cycle_warping(run_idx, cycle_idxs)
- cycle_trajectories(run_idx, cycle_idxs)
- cycle_cross_section(run_idx, cycle_idxs, fields=['trajectories', 'resampling',
                                                   'boundary_conditions', 'warping'])
  - which calls the other functions based on what they are.


** TODO [#B] allow for arbitrary number of frames to be saved in HDF5 traj part :core:

** TODO [#B] add method for iterating over runs and trajectories in correct order :feature:
** TODO [#B] allow for passing in of real np.dtypes to resampling records :core:

special handling for the variable length "tokens"

** TODO [#B] original WExplore algorithm                            :feature:
** TODO [#C] implement chunking strategies                          :feature:

<<<<<<< HEAD
- [ ] protein, ligand, solvent
- [ ] ligand, binding-site
=======

** TODO [#C] compliance infrastructure                              :feature:

** TODO [#C] only accept Quantity type objects that match/convert units :feature:

This will require choosing a unit library:
- simtk.units
- pint

** TODO [#C] HDF5 topology                                    :core:topology:

** TODO [#C] simulation reproducibility metadata                    :feature:

** TODO [#C] traj object for trajs in WepyHDF5                      :feature:

This would have the same API as the TrajHDF5 object.

** TODO [#C] HDF5 topology                                    :core:topology:

This needs to be developed.
- JSON represenation also capable to be converted to and from


** TODO [#B] add records for the boundary conditions                   :core:
This needs to be implemented in the WepyHDF5 and in the actual
boundary conditions class.

** TODO [#C] add support for trajectory total ordering              :feature:

That means a single unique positive integer index for every trajectory in the whole file.

Support this as an trajectory selector in the iter_trajs.

** TODO [#A] fix compute observable to write feature vector style      :core:

** TODO [#B] deprecate the old redundant iter functions
