* Weighted Ensemble Python (wepy)

A dead simple, modular implementation and framework for running
weighted ensemble simulations in pure python.

The goal of the architecture is that it should be highly modular to
allow extension, but provide a "killer app" for most uses that just
works, no questions asked.

Comes equipped with support for [[https://github.com/pandegroup/openmm][OpenMM]] molecular dynamics, [[https://github.com/soravux/scoop][SCOOP]] for
concurrent execution, the [[http://pubs.acs.org/doi/abs/10.1021/jp411479c][WExplore]] resampling algorithm, and an HDF5
file format and library for storing and querying your WE datasets that
can be used from the command line.

The deeper architecture of ~wepy~ is intended to be loosely coupled,
so that unforeseen use cases can be accomodated, but tightly
integrated for the most common of use cases, i.e. molecular dynamics.

** Installation

Wepy is still in beta but you can install by cloning this repository,
switching to the last release and installing with pip:

#+BEGIN_SRC bash
  git clone https://github.com/ADicksonLab/wepy
  cd wepy
  pip install --user -e .
#+END_SRC

PyPI and Anaconda repos are planned.

The only absolutely necessary dependencies are ~numpy~ and ~h5py~,
which are used in the core classes.

The default ~Runner~ is ~OpenMM~ and parallel ~work_mapper~ is
~SCOOP~, which should also be installed automatically when following
these instructions (defined in ~setup.py~).

** Roadmap

- [X] Weighted Ensemble Layer
  - [X] simulation manager
- [-] Resampling sub-module
  - [X] Random clone-merge resampler
  - [ ] WExplore
  - [ ] resampling utilities
    - [ ] cloning and merging
    - [ ] bin mappers
    - [ ] novelty functions
- [X] OpenMM support
- [X] support for any external mapping function, including SCOOP
- [ ] HDF5 output and API
- [ ] Command Line Interface
- [ ] PyPI and Anaconda repositories


** Getting Started

The CLI for simple runs is not yet created but in the mean time you
can check out one of the examples [[./examples/sEH_TPPU_RandomCloneMerge_SCOOP][using SCOOP]] for some (minimal)
parallelization.

** Architecture

The overall architecture of the project is broken into separate modules:
- Simulation Management :: a framework for running simulations, needs:
  - Runner :: module that implements whatever dynamics you want to run
    - e.g.
      - OpenMM
  - Resampler :: the key functionality of the Weighted Ensemble
                 resampling procedure is implemented here
    - e.g.
      - WExplore
  - work mapper :: a function that implements the map function that
                   allows for arbitrary methods of parallelization
    - e.g.
      - ~map~ python builtin
      - ~scoop.futures.map~
  - Reporter :: Responsible for the collection and saving of data from wepy runs
    - e.g. HDF5 or plaintext
  - BoundaryConditions :: describes and performs boundary condition
       transformations as the simulation progresses
  - simulation manager :: coordinates all of these components to run simulations

- helper sub-modules will make the construction of new simulation
  management modules easier and standardized
- Application Layer :: This is a convenience layer for building the
     CLI and perhaps high level functions for users to write their own
     scripts
