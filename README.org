* Weighted Ensemble Python (wepy)

A dead simple, modular implementation and framework for running
weighted ensemble simulations in pure python.


Comes equipped with support for [[https://github.com/pandegroup/openmm][OpenMM]] molecular dynamics, [[https://github.com/soravux/scoop][SCOOP]] for
concurrent execution, the [[http://pubs.acs.org/doi/abs/10.1021/jp411479c][WExplore]] resampling algorithm, and an HDF5
file format and library for storing and querying your WE datasets.

** Installation

Wepy is still in beta but you can install by cloning this repository,
switching to the last release and installing with pip:

#+BEGIN_SRC bash
  git clone https://gitlab.com/ADicksonLab/wepy.git
  cd wepy
  git checkout -b master v0.2
  pip install --user -e .
#+END_SRC

** Roadmap

- [X] Weighted Ensemble Layer
  - [X] simulation manager
- [ ] Resampling sub-module
  - [ ] WExplore
  - [ ] resampling utilities
    - [ ] cloning and merging
    - [ ] bin mappers
    - [ ] novelty functions
- [X] OpenMM support
- [X] support for any external mapping function, including SCOOP
- [ ] HDF5 output and API
- [ ] Command Line Interface

** Terminology

- cycle :: the running of an MD segment and the walker resampling
           phase of a weighted ensemble run in which walkers are
           cloned and merged. Walker resampling occurs every
           \(\tau\) time units of molecular dynamics time.
- workers :: the number of actual computational units for doing the
             simulation.
- walker :: a state of the system along with a probability. At the
            beginning of a WE simulation probability is split evenly
            between the walkers. Walkers can be split/cloned onto
            multiple walkers and merged onto the same walkers. When
            a walker is cloned the probability of each new walker is
            split uniformly. When a walker is merged the probability
            is summed and one of the states is forgotten, or squashed,
            leaving only one conformation (this is only the case if we
            want to keep states that are within a particular ensemble,
            otherwise some sort of average or median state could be
            used).
- walker slot :: a slot in the list of walkers when there is a
                 constant number of walkers maintained throughout a
                 simulation.
- walker resampling :: the process of cloning and merging every cycle.
- walker trajectory :: the list of states in the history of a
     particular walker.
- walker trace :: the list of walker slots a particular walker occupied
                  during a WE run.
- walker tree :: a tree rooted at a particular point in a walker's
                 history and contains all the walkers that were cloned
                 and not squashed from the root.

** Resampling data format

Walker resampling is to be recorded as a list of the action taken and
the associated data. For cloning and merging there is 4 enumerated
actions with the data associated:
- NOTHING, walker_slot_idx :: the walker is not to be cloned or merged
     the index is the slot it will occupy in the next step which must be open
- CLONED, walker_slot_idxs[n_clones] :: the walker is to be cloned to
     the given walker slots, these slots must be available
- SQUASHED, keep_merge_walker_slot_idx :: this walker will donate it's
     probability to another walker and "merged" but its state will be
     lost, the index is the walker_slot_idx of the KEEP_MERGE walker
     before resampling
- KEEP_MERGE, walker_slot_idx :: this walker will have at least one
     squashed walker donate its probability and be merged, the index
     is the walker slot index it will occupy in the next cycle.

** Architecture

The overall architecture of the project is broken into separate modules:
- Simulation Management :: a framework for running simulations, needs:
  - Runner
    - e.g.
      - OpenMM
  - Resampler
    - e.g.
      - WExplore
  - work mapper
    - e.g.
      - ~map~ python builtin
      - ~scoop.futures.map~

- Resampler :: the implementations of specific weighted ensemble
               resampling algorithms
- Runner :: an application which changes the state of a walker

- Application Layer :: This is a convenience layer for building the
     CLI and perhaps high level functions for users to write their own
     scripts
